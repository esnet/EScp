/* automatically generated by rust-bindgen 0.68.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _SYS_STAT_H: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __time_t_defined: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const THREAD_COUNT: u32 = 32;
pub const ESCP_MSG_COUNT: u32 = 16384;
pub const ESCP_MSG_SZ: u32 = 128;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::core::ffi::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::core::mem::MaybeUninit<stat> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::core::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::core::ffi::c_char, __buf: *mut stat) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::core::ffi::c_int, __buf: *mut stat) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __buf: *mut stat,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::core::ffi::c_char, __buf: *mut stat) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::core::ffi::c_char, __mode: __mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::core::ffi::c_char, __mode: __mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::core::ffi::c_int, __mode: __mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::core::ffi::c_int,
        __file: *const ::core::ffi::c_char,
        __mode: __mode_t,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::core::ffi::c_char, __mode: __mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __mode: __mode_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::core::ffi::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::core::ffi::c_char, __mode: __mode_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __mode: __mode_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __times: *const timespec,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::core::ffi::c_int, __times: *const timespec) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::core::ffi::c_ushort,
    pub d_type: ::core::ffi::c_uchar,
    pub d_name: [::core::ffi::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::core::mem::MaybeUninit<dirent> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::core::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_1 = 0;
pub const DT_FIFO: _bindgen_ty_1 = 1;
pub const DT_CHR: _bindgen_ty_1 = 2;
pub const DT_DIR: _bindgen_ty_1 = 4;
pub const DT_BLK: _bindgen_ty_1 = 6;
pub const DT_REG: _bindgen_ty_1 = 8;
pub const DT_LNK: _bindgen_ty_1 = 10;
pub const DT_SOCK: _bindgen_ty_1 = 12;
pub const DT_WHT: _bindgen_ty_1 = 14;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn opendir(__name: *const ::core::ffi::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::core::ffi::c_int) -> *mut DIR;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::core::ffi::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::core::ffi::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::core::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::core::ffi::c_int,
        >,
        __cmp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::core::ffi::c_int,
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub byte: [::core::ffi::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::core::mem::MaybeUninit<sockaddr_storage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::core::mem::align_of::<sockaddr_storage>(),
        1usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).byte) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(byte)
        )
    );
}
extern "C" {
    pub static mut verbose_logging: u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::core::ffi::c_void,
    pub iov_len: u64,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::core::mem::MaybeUninit<iovec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::core::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub static mut ESCP_DTN_ARGS: *mut dtn_args;
}
extern "C" {
    pub static mut ESCP_DROPPED_MSG: u64;
}
extern "C" {
    pub fn args_new() -> *mut dtn_args;
}
extern "C" {
    pub fn affinity_set(args: *mut dtn_args);
}
extern "C" {
    pub fn dns_lookup(
        arg1: *mut ::core::ffi::c_char,
        arg2: *mut ::core::ffi::c_char,
    ) -> sockaddr_storage;
}
extern "C" {
    pub fn dtn_log_getnext() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn dtn_err_getnext() -> *mut ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_object {
    pub QD: i32,
    pub pad12: i32,
    pub blk_sz: u32,
    pub id: u16,
    pub io_type: u16,
    pub head: i64,
    pub tail: i64,
    pub pad11: u64,
    pub io_flags: i32,
    pub io_ret: i32,
    pub thread_count: u32,
    pub sparse: u8,
    pub pad3: u8,
    pub pad2: u16,
    pub pad1: u64,
    pub pvdr: *mut ::core::ffi::c_void,
    pub args: *mut ::core::ffi::c_char,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::core::ffi::c_char,
            arg2: ::core::ffi::c_int,
            ...
        ) -> ::core::ffi::c_int,
    >,
    pub opendir:
        ::core::option::Option<unsafe extern "C" fn(name: *const ::core::ffi::c_char) -> *mut DIR>,
    pub closedir:
        ::core::option::Option<unsafe extern "C" fn(dirp: *mut DIR) -> ::core::ffi::c_int>,
    pub readdir: ::core::option::Option<unsafe extern "C" fn(dirp: *mut DIR) -> *mut dirent>,
    pub close_fd: ::core::option::Option<
        unsafe extern "C" fn(arg1: ::core::ffi::c_int) -> ::core::ffi::c_int,
    >,
    pub close: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
    >,
    pub truncate: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void, arg2: i64) -> ::core::ffi::c_int,
    >,
    pub fstat: ::core::option::Option<
        unsafe extern "C" fn(arg1: ::core::ffi::c_int, arg2: *mut stat) -> ::core::ffi::c_int,
    >,
    pub fetch: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
    >,
    pub flush: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub set: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            key: i32,
            value: u64,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub get: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void, key: i32) -> *mut ::core::ffi::c_void,
    >,
    pub submit: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            sz: *mut i32,
            offset: *mut u64,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub complete: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::core::ffi::c_void,
            arg2: *mut ::core::ffi::c_void,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub preserve: ::core::option::Option<
        unsafe extern "C" fn(
            fd: i32,
            mode: u32,
            uid: u32,
            gid: u32,
            atim_sec: i64,
            atim_nano: i64,
            mtim_sec: i64,
            mtim_nano: i64,
        ) -> *mut ::core::ffi::c_void,
    >,
    pub cleanup: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
    >,
}
#[test]
fn bindgen_test_layout_file_object() {
    const UNINIT: ::core::mem::MaybeUninit<file_object> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<file_object>(),
        208usize,
        concat!("Size of: ", stringify!(file_object))
    );
    assert_eq!(
        ::core::mem::align_of::<file_object>(),
        8usize,
        concat!("Alignment of ", stringify!(file_object))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QD) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(QD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad12) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pad12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blk_sz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(blk_sz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).io_type) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(io_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad11) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pad11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).io_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(io_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).io_ret) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(io_ret)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sparse) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(sparse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad3) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pvdr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(pvdr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).args) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).opendir) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).closedir) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(closedir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).readdir) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close_fd) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(close_fd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).truncate) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fstat) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(fstat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fetch) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(fetch)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).get) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).submit) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(submit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).complete) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(complete)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).preserve) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(preserve)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cleanup) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(file_object),
            "::",
            stringify!(cleanup)
        )
    );
}
extern "C" {
    pub fn file_completetransfer();
}
extern "C" {
    pub fn file_randrd(buf: *mut ::core::ffi::c_void, count: ::core::ffi::c_int);
}
extern "C" {
    pub fn file_prng(buf: *mut ::core::ffi::c_void, sz: ::core::ffi::c_int);
}
extern "C" {
    pub fn file_memoryinit(
        arg1: *mut ::core::ffi::c_void,
        arg2: ::core::ffi::c_int,
    ) -> *mut file_object;
}
extern "C" {
    pub fn file_posixget(arg: *mut ::core::ffi::c_void, key: i32) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn file_posixset(
        arg: *mut ::core::ffi::c_void,
        key: i32,
        value: u64,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn file_posixinit(fob: *mut file_object) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn file_posixfetch(arg: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn file_posixflush(arg: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn file_uringinit(fob: *mut file_object) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn file_dummyinit(fob: *mut file_object) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn file_hash(
        block: *mut ::core::ffi::c_void,
        sz: ::core::ffi::c_int,
        seed: ::core::ffi::c_int,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_stat_type {
    _unused: [u8; 0],
}
extern "C" {
    pub fn file_addfile(
        fileno: u64,
        fd: ::core::ffi::c_int,
        sz: i64,
        as_: i64,
        an: i64,
        ms: i64,
        mn: i64,
    ) -> *mut file_stat_type;
}
extern "C" {
    pub fn file_next(id: ::core::ffi::c_int) -> *mut file_stat_type;
}
extern "C" {
    pub fn file_wait(fileno: u64) -> *mut file_stat_type;
}
extern "C" {
    pub fn file_get_activeport(args: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct dtn_args {
    pub do_server: bool,
    pub do_ssh: bool,
    pub do_crypto: bool,
    pub do_hash: bool,
    pub do_preserve: bool,
    pub nodirect: bool,
    pub recursive: bool,
    pub file_count: ::core::ffi::c_int,
    pub host_count: ::core::ffi::c_int,
    pub mtu: ::core::ffi::c_int,
    pub block: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub QD: ::core::ffi::c_int,
    pub compression: ::core::ffi::c_int,
    pub sparse: ::core::ffi::c_int,
    pub hugepages: ::core::ffi::c_int,
    pub disable_io: i64,
    pub pacing: u64,
    pub io_engine_name: *mut ::core::ffi::c_char,
    pub io_engine: ::core::ffi::c_int,
    pub window: ::core::ffi::c_uint,
    pub session_id: u64,
    pub crypto_key: [u8; 16usize],
    pub do_affinity: bool,
    pub cpumask_len: ::core::ffi::c_int,
    pub cpumask_bytes: [u8; 32usize],
    pub nodemask: u64,
    pub sock_store_count: ::core::ffi::c_int,
    pub __bindgen_padding_0: [u8; 36usize],
    pub sock_store: [sockaddr_storage; 32usize],
    pub fob: *mut file_object,
    pub __bindgen_padding_1: [u32; 14usize],
    pub thread_id: ::core::ffi::c_int,
    pub __bindgen_padding_2: [u32; 15usize],
    pub thread_count: ::core::ffi::c_int,
    pub __bindgen_padding_3: [u16; 30usize],
    pub active_port: u16,
    pub __bindgen_padding_4: [u64; 7usize],
    pub debug_claim: u64,
    pub __bindgen_padding_5: [u64; 7usize],
    pub debug_count: u64,
    pub debug_buf: [u8; 2097152usize],
    pub debug_poison: u64,
    pub __bindgen_padding_6: [u64; 6usize],
    pub msg_claim: u64,
    pub __bindgen_padding_7: [u64; 7usize],
    pub msg_count: u64,
    pub msg_buf: [u8; 2097152usize],
    pub msg_poison: u64,
    pub __bindgen_padding_8: [u64; 6usize],
    pub bytes_io: u64,
    pub __bindgen_padding_9: [u64; 7usize],
    pub files_closed: u64,
    pub __bindgen_padding_10: [u64; 7usize],
    pub files_open: u64,
}
#[test]
fn bindgen_test_layout_dtn_args() {
    const UNINIT: ::core::mem::MaybeUninit<dtn_args> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<dtn_args>(),
        4199296usize,
        concat!("Size of: ", stringify!(dtn_args))
    );
    assert_eq!(
        ::core::mem::align_of::<dtn_args>(),
        64usize,
        concat!("Alignment of ", stringify!(dtn_args))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_server) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_server)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_ssh) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_ssh)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_crypto) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_crypto)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_hash) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_hash)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_preserve) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_preserve)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nodirect) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(nodirect)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).recursive) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(recursive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(file_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).host_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(host_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).QD) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(QD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).compression) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sparse) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(sparse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).hugepages) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(hugepages)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).disable_io) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(disable_io)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pacing) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(pacing)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).io_engine_name) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(io_engine_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).io_engine) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(io_engine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).session_id) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(session_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crypto_key) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(crypto_key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).do_affinity) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(do_affinity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpumask_len) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(cpumask_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpumask_bytes) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(cpumask_bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nodemask) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(nodemask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sock_store_count) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(sock_store_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sock_store) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(sock_store)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fob) as usize - ptr as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(fob)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).active_port) as usize - ptr as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(active_port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).debug_claim) as usize - ptr as usize },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(debug_claim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).debug_count) as usize - ptr as usize },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(debug_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).debug_buf) as usize - ptr as usize },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(debug_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).debug_poison) as usize - ptr as usize },
        2101768usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(debug_poison)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_claim) as usize - ptr as usize },
        2101824usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(msg_claim)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_count) as usize - ptr as usize },
        2101888usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(msg_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_buf) as usize - ptr as usize },
        2101896usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(msg_buf)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).msg_poison) as usize - ptr as usize },
        4199048usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(msg_poison)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes_io) as usize - ptr as usize },
        4199104usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(bytes_io)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).files_closed) as usize - ptr as usize },
        4199168usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(files_closed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).files_open) as usize - ptr as usize },
        4199232usize,
        concat!(
            "Offset of field: ",
            stringify!(dtn_args),
            "::",
            stringify!(files_open)
        )
    );
}
extern "C" {
    pub fn meta_send(
        buf: *mut ::core::ffi::c_char,
        hdr: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn tx_start(args: *mut dtn_args);
}
extern "C" {
    pub fn rx_start(args: *mut dtn_args) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn print_args(args: *mut dtn_args);
}
extern "C" {
    pub fn finish_transfer(args: *mut dtn_args, arg1: u64);
}
extern "C" {
    pub fn dtn_waituntilready(arg: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn tx_init(args: *mut dtn_args);
}
extern "C" {
    pub fn get_bytes_io(dtn: *mut dtn_args) -> i64;
}
extern "C" {
    pub fn tx_getclosed() -> i64;
}
extern "C" {
    pub fn human_write(number: u64, is_bytes: bool) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn get_threads_finished() -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fc_info_struct {
    pub state: u64,
    pub file_no: u64,
    pub bytes: u64,
    pub crc: u32,
    pub completion: u32,
    pub blocks: u64,
}
#[test]
fn bindgen_test_layout_fc_info_struct() {
    const UNINIT: ::core::mem::MaybeUninit<fc_info_struct> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<fc_info_struct>(),
        40usize,
        concat!("Size of: ", stringify!(fc_info_struct))
    );
    assert_eq!(
        ::core::mem::align_of::<fc_info_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(fc_info_struct))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_no) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(file_no)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).crc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(crc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).completion) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(completion)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fc_info_struct),
            "::",
            stringify!(blocks)
        )
    );
}
extern "C" {
    pub fn fc_pop() -> *mut fc_info_struct;
}
extern "C" {
    pub fn fc_push(file_no: u64, bytes: u64, crc: u32);
}
extern "C" {
    pub fn meta_recv() -> *mut u8;
}
extern "C" {
    pub fn meta_complete();
}
